{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nconst useLogin = () => {\n  _s();\n  const [userInfo, setUserInfo] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [errorInput, setErrorInput] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const navigate = useNavigate();\n\n  // Utilisez useSelector pour sélectionner spécifiquement l'état ou la propriété indiquant si l'utilisateur est connecté\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated); // Exemple: ajustez selon votre structure de state\n\n  // Rediriger vers la page d'accueil si l'utilisateur est authentifié\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate(\"/\");\n    }\n  }, [isAuthenticated, navigate]);\n  const validate = () => {\n    let error = {};\n    if (!userInfo.email) {\n      error.email = \"Email is required\";\n    }\n    if (!userInfo.password) {\n      error.password = \"Password is required\";\n    }\n    setErrorInput(error);\n    return Object.keys(error).length === 0;\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n    setIsError(false);\n    const isValid = validate();\n    if (!isValid) return;\n    setIsLoading(true);\n    axios.post(\"/api/user/login\", userInfo).then(() => {\n      // La logique pour gérer une réponse de connexion réussie devrait idéalement mettre à jour l'état global de l'authentification\n      // La redirection est gérée par le useEffect ci-dessus\n    }).catch(err => {\n      setIsError(err.response ? err.response.data : 'An error occurred');\n    }).finally(() => setIsLoading(false));\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUserInfo(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  return {\n    userInfo,\n    errorInput,\n    isLoading,\n    isError,\n    handleChange,\n    onSubmit\n  };\n};\n_s(useLogin, \"QL8s+/69p1hfXjhYfX29HLSonJc=\", false, function () {\n  return [useNavigate, useSelector];\n});\nexport default useLogin;","map":{"version":3,"names":["useEffect","useState","useNavigate","useSelector","axios","useLogin","_s","userInfo","setUserInfo","email","password","errorInput","setErrorInput","isLoading","setIsLoading","isError","setIsError","navigate","isAuthenticated","state","auth","validate","error","Object","keys","length","onSubmit","e","preventDefault","isValid","post","then","catch","err","response","data","finally","handleChange","name","value","target","prev"],"sources":["C:/Users/Meryem/OneDrive/Desktop/PROJET/client/src/pages/Login/useLogin.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nconst useLogin = () => {\r\n  const [userInfo, setUserInfo] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [errorInput, setErrorInput] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // Utilisez useSelector pour sélectionner spécifiquement l'état ou la propriété indiquant si l'utilisateur est connecté\r\n  const isAuthenticated = useSelector((state) => state.auth.isAuthenticated); // Exemple: ajustez selon votre structure de state\r\n\r\n  // Rediriger vers la page d'accueil si l'utilisateur est authentifié\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      navigate(\"/\");\r\n    }\r\n  }, [isAuthenticated, navigate]);\r\n\r\n  const validate = () => {\r\n    let error = {};\r\n\r\n    if (!userInfo.email) {\r\n      error.email = \"Email is required\";\r\n    }\r\n    if (!userInfo.password) {\r\n      error.password = \"Password is required\";\r\n    }\r\n\r\n    setErrorInput(error);\r\n    return Object.keys(error).length === 0;\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    setIsError(false);\r\n    const isValid = validate();\r\n\r\n    if (!isValid) return;\r\n\r\n    setIsLoading(true);\r\n    axios\r\n      .post(\"/api/user/login\", userInfo)\r\n      .then(() => {\r\n        // La logique pour gérer une réponse de connexion réussie devrait idéalement mettre à jour l'état global de l'authentification\r\n        // La redirection est gérée par le useEffect ci-dessus\r\n      })\r\n      .catch((err) => {\r\n        setIsError(err.response ? err.response.data : 'An error occurred');\r\n      })\r\n      .finally(() => setIsLoading(false));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserInfo((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return { userInfo, errorInput, isLoading, isError, handleChange, onSubmit };\r\n};\r\n\r\nexport default useLogin;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC;IACvCQ,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC;IAC3CQ,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMgB,QAAQ,GAAGf,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMgB,eAAe,GAAGf,WAAW,CAAEgB,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,eAAe,CAAC,CAAC,CAAC;;EAE5E;EACAlB,SAAS,CAAC,MAAM;IACd,IAAIkB,eAAe,EAAE;MACnBD,QAAQ,CAAC,GAAG,CAAC;IACf;EACF,CAAC,EAAE,CAACC,eAAe,EAAED,QAAQ,CAAC,CAAC;EAE/B,MAAMI,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIC,KAAK,GAAG,CAAC,CAAC;IAEd,IAAI,CAACf,QAAQ,CAACE,KAAK,EAAE;MACnBa,KAAK,CAACb,KAAK,GAAG,mBAAmB;IACnC;IACA,IAAI,CAACF,QAAQ,CAACG,QAAQ,EAAE;MACtBY,KAAK,CAACZ,QAAQ,GAAG,sBAAsB;IACzC;IAEAE,aAAa,CAACU,KAAK,CAAC;IACpB,OAAOC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,KAAK,CAAC;EACxC,CAAC;EAED,MAAMC,QAAQ,GAAIC,CAAC,IAAK;IACtBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBZ,UAAU,CAAC,KAAK,CAAC;IACjB,MAAMa,OAAO,GAAGR,QAAQ,CAAC,CAAC;IAE1B,IAAI,CAACQ,OAAO,EAAE;IAEdf,YAAY,CAAC,IAAI,CAAC;IAClBV,KAAK,CACF0B,IAAI,CAAC,iBAAiB,EAAEvB,QAAQ,CAAC,CACjCwB,IAAI,CAAC,MAAM;MACV;MACA;IAAA,CACD,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;MACdjB,UAAU,CAACiB,GAAG,CAACC,QAAQ,GAAGD,GAAG,CAACC,QAAQ,CAACC,IAAI,GAAG,mBAAmB,CAAC;IACpE,CAAC,CAAC,CACDC,OAAO,CAAC,MAAMtB,YAAY,CAAC,KAAK,CAAC,CAAC;EACvC,CAAC;EAED,MAAMuB,YAAY,GAAIV,CAAC,IAAK;IAC1B,MAAM;MAAEW,IAAI;MAAEC;IAAM,CAAC,GAAGZ,CAAC,CAACa,MAAM;IAChChC,WAAW,CAAEiC,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACH,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EACrD,CAAC;EAED,OAAO;IAAEhC,QAAQ;IAAEI,UAAU;IAAEE,SAAS;IAAEE,OAAO;IAAEsB,YAAY;IAAEX;EAAS,CAAC;AAC7E,CAAC;AAACpB,EAAA,CAhEID,QAAQ;EAAA,QAYKH,WAAW,EAGJC,WAAW;AAAA;AAmDrC,eAAeE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}